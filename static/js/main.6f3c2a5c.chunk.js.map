{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","mnemonic","setMnemonic","finalWords","setFinalWords","className","onClick","entropy","parseInt","prompt","bip39","split","filter","_","i","a","length","join","error","alert","style","width","value","onChange","event","target","english","word","push","console","log","display","gap","flexWrap","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUA+CeA,MA3Cf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQC,QAAS,WACf,IACE,IAAMC,EAAUC,SAASC,OAAO,8DAA+D,QAAU,IACzGP,EAAYQ,mBAAuBH,GAASI,MAAM,KAAKC,QAAO,SAACC,EAAGC,EAAGC,GAAP,OAAaD,EAAIC,EAAEC,OAAS,KAAGC,KAAK,MAEpG,MAAMC,GACJC,MAAMD,KANV,+BADF,8BAYE,uBAAOE,MAAO,CAACC,MAAO,SAAWC,MAAOrB,EAAUsB,SAAU,SAACC,GAAD,OAAWtB,EAAYsB,EAAMC,OAAOH,UAEhG,wBAAQhB,QAAS,WACf,IADqB,EACfH,EAAuB,GADR,cAEFO,YAAgBgB,SAFd,IAErB,2BAA4C,CAAC,IAAlCC,EAAiC,QACtCjB,mBAAuBT,EAAW,IAAM0B,EAAMjB,YAAgBgB,SAChEvB,EAAWyB,KAAKD,GAGhBE,QAAQC,IAAI7B,EAAW,IAAM0B,EAAM,gBAPlB,8BAUhBxB,EAAWa,QACdG,MAAM,gBAERf,EAAcD,EAAWc,KAAK,OAbhC,yCAeA,qBAAKG,MAAO,CAACW,QAAS,OAAQC,IAAK,OAAQC,SAAU,QAArD,SACG9B,EAAWQ,MAAM,KAAKuB,KAAI,SAAAP,GAAI,OAAI,sBAAMP,MAAO,CAACW,QAAS,UAAvB,SAA8CJ,GAAR,mBCnCnFQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6f3c2a5c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport * as bip39 from 'bip39';\n\nfunction App() {\n  const [mnemonic, setMnemonic] = useState('');\n  const [finalWords, setFinalWords] = useState('');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={() => {\n          try {\n            const entropy = parseInt(prompt(\"Please enter entropy (128 for 11 words or 256 for 23 words)\", \"256\") || \"\");\n            setMnemonic(bip39.generateMnemonic(entropy).split(\" \").filter((_, i, a) => i < a.length - 1).join(\" \"));\n          }\n          catch(error) {\n            alert(error);\n          }\n        }}>Generate mnemonic</button>\n\n        Mnemonic (Without checksum)\n        <input style={{width: \"800px\"}}  value={mnemonic} onChange={(event) => setMnemonic(event.target.value)}/>\n\n        <button onClick={() => {\n          const finalWords: string[] = [];\n          for (const word of bip39.wordlists.english) {\n            if (bip39.validateMnemonic(mnemonic + \" \" + word, bip39.wordlists.english)) {\n              finalWords.push(word)\n            }\n            else {\n              console.log(mnemonic + \" \" + word +\" is invalid\")\n            }\n          }\n          if (!finalWords.length) {\n            alert(\"Invalid seed\");\n          }\n          setFinalWords(finalWords.join(\" \"));\n        }}>Generate final word options</button>\n        <div style={{display: 'flex', gap: '10px', flexWrap: 'wrap'}}>\n          {finalWords.split(\" \").map(word => <span style={{display: \"inline\"}} key=\"word\">{word}</span>)}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}